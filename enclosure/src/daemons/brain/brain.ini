[brain]
sleep-time = 00:00
wakeup-time = 07:00


[synapses]
control-rotary = enclosure, sonos
control-button = enclosure, sonos
volume-rotary = enclosure, sonos
volume-button = enclosure, sonos
rfid = enclosure, brickies
motion = enclosure
kalliope-state = kalliope
arduino-state = arduino
;system-time = system


[enclosure:components]
control = hal9000.plugins.brain.enclosure.control.Control
volume = hal9000.plugins.brain.enclosure.volume.Volume
motion = hal9000.plugins.brain.enclosure.motion.Motion
rfid = hal9000.plugins.brain.enclosure.rfid.RFID

[enclosure:control]
menu-files = conf.d/control/menu/de/main.ini, conf.d/control/menu/de/sonos.ini
item-files = conf.d/control/menu/main.ini,    conf.d/control/menu/sonos.ini

[enclosure:volume]
initial-volume = 50
initial-mute = False
volume-minimum = 0
volume-maximum = 100
volume-step = 5


[trigger:control-rotary]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/arduino/rotary/control"
mqtt-payload-regex = "rotary:control delta=(?P<control>[+-]\d+)"
neuron-json-formatter = '{"control": {"delta": "%(control)s"}}'

[trigger:control-button]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/arduino/button/control"
mqtt-payload-regex = "button:control status=(?P<select>\w+)"
neuron-json-formatter = '{"control": {"select": "%(select)s"}}'

[trigger:volume-rotary]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/arduino/rotary/volume"
mqtt-payload-regex = "rotary:volume delta=(?P<volume>[+-]?\d+)"
neuron-json-formatter = '{"volume": {"delta": "%(volume)s"}}'

[trigger:volume-button]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/arduino/toggle/volume"
mqtt-payload-regex = "toggle:volume status=(?P<mute>\w+)"
neuron-json-formatter = '{"volume": {"mute": "%(mute)s"}}'

[trigger:rfid]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/arduino/rfid/brickies"
mqtt-payload-regex = "rfid:brickies (?P<event>\w+)=(?P<uid>\w{8})"
neuron-json-formatter = '{"rfid": {"event": "%(event)s","uid": "%(uid)s"}}'

[trigger:arduino-state]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/arduino/webserial/state"
mqtt-payload-regex = "(?P<state>\w+)"
neuron-json-formatter = '{"arduino": {"webserial": "%(state)s"}}'

[trigger:kalliope-state]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/kalliope/brain/state"
mqtt-payload-regex = "(?P<state>\w+)"
neuron-json-formatter = '{"kalliope": {"state": "%(state)s"}}'

;[trigger:system-time]
;module = hal9000.plugins.brain.mqtt
;mqtt-topic = "hal9000/event/system/time/synced"
;mqtt-payload-regex = "^$"
;neuron-json-formatter = '{"system": {"time": "synced"}}'


[action:enclosure]
module = hal9000.plugins.brain.enclosure

[action:arduino]
module = hal9000.plugins.brain.arduino

[action:kalliope]
module = hal9000.plugins.brain.kalliope
kalliope-trigger-mqtt-topic = kalliope/trigger/multiplexer/event

[action:system]
;module = hal9000.plugins.brain.system

[action:sonos]
module = hal9000.plugins.brain.sonos
sonos-name = Arbeitszimmer
sonos-ip = 192.168.3.30
volume-step = 5

[action:brickies]
module = hal9000.plugins.brain.brickies
brickies-server-url = http://192.168.4.1/brickies-agent
brickies-reader-service = hal9000
brickies-reader-name = iot-pi0-hal9000
brickies-card-event = jsonpath:signal:$.rfid.event
brickies-card-uid = jsonpath:signal:$.rfid.uid

[action:mqtt]
module = hal9000.plugins.brain.mqtt


[command:reboot]
exec = /usr/bin/sudo /usr/sbin/shutdown -r now

[command:poweroff]
exec = /usr/bin/sudo /usr/sbin/shutdown -h now


[alsa:PCH]
cardindex = 1
control = Master
range-raw-minimum = 27
range-raw-maximum = 87

[alsa:seeed2micvoicec]
cardindex = 0
control = Playback
range-raw-minimum = 100
range-raw-maximum = 200


[runlevel]
boot-timeout = 30
boot-finished-action-name = mqtt
boot-finished-signal-data = {"mqtt": [{"topic": "hal9000/command/arduino/gui/screen", "payload": "{'hal9000': {'queue': 'replace', 'sequence': {'name': 'wakeup', 'loop': 'false'}}"}, {"topic": "hal9000/command/arduino/gui/screen", "payload": "{'hal9000': {'queue': 'append', 'sequence': {'name': 'active', 'loop': 'false'}}"}, {"topic": "hal9000/command/arduino/gui/screen", "payload": "{'hal9000': {'queue': 'append', 'sequence': {'name': 'active', 'loop': 'false'}}"}, {"topic": "hal9000/command/arduino/gui/screen", "payload": "{'hal9000': {'queue': 'append', 'sequence': {'name': 'sleep', 'loop': 'false'}}"},{"topic": "hal9000/event/brain/ready", "payload": ""}]}


[mqtt]
server = 127.0.0.1
port = 1883

[help]
#translation-file = ...
error-database-base-url = https://github.com/juergenpabel/HAL9000-kalliope/wiki/

[python]
module-paths = "../../package", "./package"
daemon-module = hal9000.brain.daemon

[loggers]
keys = root, brain

[handlers]
keys=stdout

[formatters]
keys=stdout

[logger_root]
level=DEBUG
handlers=stdout

[logger_brain]
level=DEBUG
handlers=stdout
qualname=brain
propagate=0

[handler_stdout]
class=StreamHandler
formatter=stdout
args=(sys.stdout,)

[formatter_stdout]
format=%(asctime)s - %(levelname)-8s - %(threadName)-10s - %(name)-10s - %(message)s
datefmt=

